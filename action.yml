name: "Flutter action"
description: "Setup your runner with Flutter environment"
author: "Alif Rachmawadi"
branding:
  icon: "maximize"
  color: "blue"
inputs:
  flutter-version:
    description: "The Flutter version to make available on the path"
    required: false
    default: "any"
  channel:
    description: "The Flutter build release channel"
    required: false
    default: "stable"
  flutter-repo:
    description: "The Flutter repo url"
    required: false
    default: ""
  cache:
    description: "Cache the Flutter SDK"
    required: false
    default: "false"
  cache-key:
    description: "Identifier for the Flutter SDK cache"
    required: false
    default: "flutter-:os:-:channel:-:version:-:arch:-:hash:"
  cache-path:
    description: "Flutter SDK cache path"
    required: false
    default: ""
  architecture:
    description: "The architecture of Flutter SDK executable (x64 or arm64)"
    required: false
    default: ${{ runner.arch }}
outputs:
  CACHE-PATH:
    value: "${{ steps.flutter-action.outputs.CACHE-PATH }}"
  CACHE-KEY:
    value: "${{ steps.flutter-action.outputs.CACHE-KEY }}"
  CHANNEL:
    value: "${{ steps.flutter-action.outputs.CHANNEL }}"
  VERSION:
    value: "${{ steps.flutter-action.outputs.VERSION }}"
  ARCHITECTURE:
    value: "${{ steps.flutter-action.outputs.ARCHITECTURE }}"
runs:
  using: "composite"
  steps:
    - uses: actions/setup-python@v5
      if: ${{ runner.os != 'macos' }}
      with:
        python-version: "3.12"
    - id: flutter-action
      env:
        USE_CACHE: ${{inputs.cache}}
      run: |
        import subprocess
        import os
        script_path = os.path.join(r'${{ github.action_path }}',  'setup.py')
        command = [
            "python", script_path,
            "--print-only",
            "--cache-path", "${{ inputs.cache-path }}",
            "--cache-key", "${{ inputs.cache-key }}",
            "--repo-url", "${{ inputs.flutter-repo }}",
            "--version", "${{ inputs.flutter-version }}",
            "--arch", "${{ inputs.architecture }}",
            "--channel", "${{ inputs.channel }}"
        ]
        # Execute the command and capture the output
        if hasattr(subprocess, 'run'):
          result = subprocess.run(command, capture_output=True, text=True)
          print("Command executed successfully with subprocess.run")
          print("STDOUT:", result.stdout)
          print("STDERR:", result.stderr)
          print("Return code:", result.returncode)
        else:
          print("subprocess.run not available, falling back to Popen")
          process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
          stdout, stderr = process.communicate()
          print("Command executed successfully with subprocess.Popen")
          print("STDOUT:", stdout)
          print("STDERR:", stderr)
          print("Return code:", process.returncode)
      shell: python
    - if: ${{ inputs.cache == 'true' }}
      uses: actions/cache@v3
      with:
        path: ${{ steps.flutter-action.outputs.CACHE-PATH }}
        key: ${{ steps.flutter-action.outputs.CACHE-KEY }}-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ steps.flutter-action.outputs.CACHE-KEY }}-${{ hashFiles('**/pubspec.lock') }}
          ${{ steps.flutter-action.outputs.CACHE-KEY }}
    - run: |
        import subprocess
        import os
        script_path = os.path.join(r'${{ github.action_path }}', 'setup.py')
        cache_path = r"${{ steps.flutter-action.outputs.CACHE-PATH }}"

        command = [
            "python", script_path,
            "--print-only",
            "--cache-path", cache_path,
            "--cache-key", "${{ inputs.cache-key }}",
            "--repo-url", "${{ inputs.flutter-repo }}",
            "--version", "${{ steps.flutter-action.outputs.VERSION }}",
            "--arch", "${{ steps.flutter-action.outputs.ARCHITECTURE }}",
            "--channel", "${{ steps.flutter-action.outputs.CHANNEL }}"
        ]
        # Execute the command and capture the output
        if hasattr(subprocess, 'run'):
          result = subprocess.run(command, capture_output=True, text=True)
          print("Command executed successfully with subprocess.run")
          print("STDOUT:", result.stdout)
          print("STDERR:", result.stderr)
          print("Return code:", result.returncode)
        else:
          print("subprocess.run not available, falling back to Popen")
          process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
          stdout, stderr = process.communicate()
          print("Command executed successfully with subprocess.Popen")
          print("STDOUT:", stdout)
          print("STDERR:", stderr)
          print("Return code:", process.returncode)
      shell: python
